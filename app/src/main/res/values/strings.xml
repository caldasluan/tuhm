<resources>
    <string name="app_name">Tuhm</string>

    <string name="action_search">Search</string>
    <string name="action_delete">Delete</string>
    <string name="action_share">Share</string>

    <string name="title_projects">Evaluations</string>
    <string name="title_new_project">New Evaluation</string>
    <string name="title_edit_project">Edit Evaluation</string>
    <string name="title_project">Evaluation</string>
    <string name="title_problem">Problem</string>
    <string name="title_heuristic">Heuristic</string>
    <string name="title_report">Report</string>
    <string name="title_report_problem">Problem Report</string>
    <string name="title_list_heuristics">Heuristics</string>
    <string name="title_alert_delete_project">Delete Evaluation</string>
    <string name="title_alert_delete_problem">Delete Problem</string>
    <string name="title_alert_change_img_problem">Edit Image</string>

    <string name="txt_title">Title</string>
    <string name="txt_description">Description</string>
    <string name="txt_gravity">Gravity</string>
    <string name="txt_search">Search…</string>
    <string name="txt_create_project">New Evaluation created.</string>
    <string name="txt_edit_project">The Evaluation has been changed.</string>
    <string name="txt_delete_project">Evaluation has been deleted.</string>
    <string name="txt_create_problem">New problem created.</string>
    <string name="txt_edit_problem">The problem has been changed.</string>
    <string name="txt_delete_problem">Problem has been deleted.</string>
    <string name="txt_violated_heuristics">Violated Heuristics:</string>
    <string name="txt_violated_heuristics_count">Violated Heuristics: %d</string>
    <string name="txt_violated_heuristics_report">Violated Heuristics</string>
    <string name="txt_definition">Definition</string>
    <string name="txt_explication">Explanation</string>
    <string name="txt_benefits">Benefits</string>
    <string name="txt_problems">Problems</string>
    <string name="txt_sub_heuristic">Sub-Heuristics</string>
    <string name="txt_list_sub_heuristic">UH%d.%d - %s</string>
    <string name="txt_alert_delete_project">Are you sure you want to delete this Evaluation?</string>
    <string name="txt_alert_delete_problem">Are you sure you want to delete this problem?</string>
    <string name="txt_alert_change_img_problem">Do you want to change or remove the image?</string>
    <string name="txt_problems_found">Problems Found</string>
    <string name="txt_gravity_absent">Non-existent: %d</string>
    <string name="txt_gravity_cosmetic">Cosmetic Problem Only: %d</string>
    <string name="txt_gravity_small">Minor Usability Problem: %d</string>
    <string name="txt_gravity_great">Major Usability Problem: %d</string>
    <string name="txt_gravity_catastrofic">Usability Catastrophe: %d</string>
    <string name="txt_sharing">Sharing…</string>

    <string name="error_title_project_null">Enter a name for your Assessment.</string>
    <string name="error_description_project_null">Enter a description for your Assessment.</string>
    <string name="error_description_problem_null">Enter a description for the problem.</string>
    <string name="error_gravity_problem_null">Enter a severity for the problem.</string>
    <string name="error_list_projects_empty">Oops! You don\'t have reviews yet.</string>
    <string name="error_list_problems_empty">Oops! You have not entered registered problems yet.</string>
    <string name="error_list_heuristics_empty">Oops! You haven\'t added heuristics yet.</string>
    <string name="error_report_heuristics_empty">No heuristics violated</string>
    <string name="error_search_heuristic_empty">No heuristics found</string>

    <string name="cont_desc_btn_add_project">Add a new review</string>
    <string name="cont_desc_btn_add_problem">Add a new issue</string>
    <string name="cont_desc_img_list_heuristic">Show or hide subheuristics</string>
    <string name="cont_desc_btn_detail_heuristic">Show heuristic details %d</string>
    <string name="cont_desc_img_problem">Problem Image</string>

    <string name="btn_save">save</string>
    <string name="btn_cancel">Cancel</string>
    <string name="btn_report">report</string>
    <string name="btn_edit">edit</string>
    <string name="btn_change">change</string>
    <string name="btn_add">add</string>
    <string name="btn_details">details</string>
    <string name="btn_delete">delete</string>
    <string name="btn_remove">remove</string>

    <string-array name="list_gravity">
        <item>Non-existent</item>
        <item>Cosmetic Problem Only</item>
        <item>Minor Usability Problem</item>
        <item>Major Usability Problem</item>
        <item>Usability Catastrophe</item>
    </string-array>

    <string-array name="list_title_heuristic">
        <item>UH1 – Visibility of System Status</item>
        <item>UH2 – Correspondence Between the Application and the Real World</item>
        <item>UH3 – User Control and Freedom</item>
        <item>UH4 – Consistency and Standards</item>
        <item>UH5 – Error Prevention</item>
        <item>UH6 – Minimize the User’s Memory Load</item>
        <item>UH7 – Customization and Shortcuts</item>
        <item>UH8 - Efficiency of Use and Performance</item>
        <item>UH9 – Aesthetic and Minimalist Design</item>
        <item>UH10 – Help Users Recognize, Diagnose, and Recover From Errors</item>
        <item>UH11 – Help and Documentation</item>
        <item>UH12 – Pleasant and Respectful Interaction with the User</item>
        <item>UH13 – Privacy</item>
    </string-array>

    <string-array name="list_definition_heuristic">
        <item>The application should keep the user informed about all processes and state changes within a reasonable period of time.</item>
        <item>The application must speak the language of the users and not in technical terms of the system. The application must follow the conventions of the real world and display the information in a logical and natural order</item>
        <item>The application should allow the user to undo and redo her/his actions for clear navigation and should provide the user with an option to exit undesirable system states.</item>
        <item>The application must follow the established conventions, allowing the users to perform their tasks in familiar, standardized and consistent manner.</item>
        <item>Eliminate error prone conditions and give the user a confirmation option with additional information before committing to the action.</item>
        <item>The application should provide visible objects, actions, and options to prevent users from having to memorize information from one interface to another.</item>
        <item>The application should provide basic and advanced settings for setting and customizing shortcuts for frequent actions.</item>
        <item>The device must be able to load and display information in a reasonable amount of time and minimize the steps required to perform a task (number of steps to be taken by the user to reach a goal). Animations and transitions should display smoothly.</item>
        <item>The application should avoid displaying unwanted information that overwhelms the screen.</item>
        <item>The application should display error messages in a language familiar to the user, accurately indicating the problem and suggesting a constructive solution.</item>
        <item>The application should provide easy-to-find documentation and help centering on the user’s current task and indicating concrete steps to follow.</item>
        <item>The device should provide a nice interaction with the user so that the user does not feel uncomfortable while using the application.</item>
        <item>The application must protect the user’s sensitive data.</item>
    </string-array>

    <string-array name="list_explication_heuristic">
        <item>By means of interaction with the application, the user must be able to perform different tasks. If user actions lead to a change of state of the application, the user must be informed in some way (for example: sounds, messages and/or animations on the screen). User actions such as gestures (touch screen and/or screen drag) should give feedback in a clear, concise and clear way.</item>
        <item>Applications currently have multiple modes of interaction, where users can perform tasks in intuitive ways by mimicking real-world interaction rules. As an example, by scrolling down a long list, if the user ‘‘slides’’ with a certain speed, the list will continue to move, mimicking the effect of inertia. Another example is with respect to the multi-touch gesture in an application, when executing a gesture of sliding to the left the system must bring the next object of the right side, that is, showing the next image of the right side (as for example a carousel functionality). Each interaction is expected to show a response similar to that expected in the real world. In addition, the language (text or icons) must be related to the real world and recognizable concepts.</item>
        <item>When the user makes a mistake by entering text, modifying configuration options or just reaching an unwanted state, the system must provide appropriate ‘‘emergency exits’’. These outputs should easily allow the user to move from an unwanted state to a desired one. Furthermore, the application should allow the user to undo and redo their actions in a simple and intuitive way, since users can often perform unwanted gestures on the touch screen of a smartphone (for example: touch, slide, etc.) which can take the application to another state.</item>
        <item>Often, different parts of the application that are related and should be similar have different design or logic of use. In general, any concept presented in a way that contrasts with the conception of the concept by the user produces confusion to some degree. This confusion can lead to a decrease in use efficiency or a low satisfaction, among other side effects. A particular gesture of user interaction in the system interface should trigger the same behavior throughout the application. Also, it is better to avoid conflicts with the operations triggered by a gesture in the application and the operations related to the default gestures of the operating system. Given all these questions, it is expected that the system will follow standards and conventions for an intuitive and user-friendly interface.</item>
        <item>The application should try to be explicit about each option and functionality available to the user. Considering a limited screen space, this can be a big challenge. Thus, the icons play a very important role, such as giving a return to the user when it interacts, and even if the visible part of the icon may be small, there must be some invisible destination extra space that, if a user reaches this space, the interaction will still occur. Unfortunately, sometimes a small image is not enough to describe in detail a function or something similar, and to fix this, the system must provide additional information on user demand. The information should be clearly displayed, trying to avoid long dialogue sequences. Furthermore, the user should be warned, especially when there are some actions that may have undesired effects on the user.</item>
        <item>Short-term human memory is limited, so the user should not be forced to remember information from one part of the system to another. Instructions on how to use the system should be visible or easy to obtain. When using applications that run on mobile devices, users are often performing other tasks at the same time they are using the application, such as exercise monitoring applications that are used during physical activity, the interface must be adapted to the context of use so that the user’s cognitive load is minimized.</item>
        <item>Each user has her/his own needs and trying to satisfy them all with a standard menu or interface can be challenging. Thus, consider allowing users to create their own shortcuts and customizing most parts of the system can help. By means of advanced configuration options, savvy users can improve their usability and new users can have a deeper sense of ownership. It is important to look at the characteristics of the target audience of the application, because this mapping allows to implement more or less advanced customization options, for example.</item>
        <item>The combination of hardware features and software needs is not always the best. The basic application is expected to be compatible with the hardware, especially with processing capabilities, to avoid black screens and long waiting times. Furthermore, animations, effects, and transitions should be displayed seamlessly and without interruption. Another critical point is the length of the sequence of steps to perform a task. Complex, potentially dangerous or infrequent tasks may contain several steps to enhance security. Simple or frequent tasks should be short, that is, have few steps to complete.</item>
        <item>The application texts should not contain irrelevant or rarely needed information. Each extra unit of information in one interface competes with other relevant pieces of information that may be in the interface, causing extra information to decrease the visibility of relevant information in the application interface. Designers should be careful when displaying information across the screen. Additionally, overloaded interfaces can produce stress for the user and can also increase the consumption of application resources on a smartphone.</item>
        <item>When an error occurs, the user does not need technical details or cryptographic alert messages, but clear messages in a recognizable language with instructions on how to recover from the error. If possible, the application should constructively suggest a solution (which may also include tips, frequently asked questions, etc.). If there is no solution to the error, or if the error has an insignificant effect, the application should allow the user to handle the error normally.</item>
        <item>The application must provide access to detailed information about the available features in a clear and simple way, from any part or state of the system where the user is located. It is recommended that this information be included in the application and easily accessible, or otherwise, that the documentation be available on a website. For very complex or somewhat difficult interactions for novice users to understand, such as multi-touch gestures on a touchscreen smartphone that can be difficult, in this case it is advisable to present tutorials, documentation and help for users to be elucidated about the correct form of execution of the gesture and so the user reaches its goal in the use of a certain functionality of the application.</item>
        <item>Mobile applications are designed to be used on portable devices (smartphones). From this point of view, ergonomics and comfort play a very important role in the interaction between the user and the application. Buttons should be placed in user-recognizable positions based on their experience with other similar applications. Furthermore, it is necessary to analyze the context of use in which the application will be inserted, such as a runner oriented application that will be used during sports practice, there must be a fully sloped interface for user comfort and ergonomics during the use of the application regarding the arrangement of the elements. The interface as a whole has to be focused on the characteristics of its target audience, and can include users with general characteristics and/or also the most specific ones, such as, for example, elderly users that tend to have certain special characteristics, such as: psycho-social and functional changes which affect vision, hearing, movement, cognition and their relation to themselves and others around them, such factors influence the way the elements are arranged at the interface.</item>
        <item>The application should request the user’s password for the modification of important data, as well as provide information about how the user’s personal data is protected, as well as about copyright content.</item>
    </string-array>

    <string-array name="list_benefits_heuristic">
        <item>The user can have a better use experience when the application informs her/him about state changes, accurately and appropriately. Another benefit is related to the user’s awareness when using the application, since her/him will know if there has been any significant change in the state of the application.</item>
        <item>By recognizing real-world concepts in the application, the user will have a smaller barrier to adapt to system usage and correctly interpret the information provided by the system as they will be presented in a logical and natural order. Another benefit is the minimization of errors made by the user during the system usage, because the user will be more familiar with the application.</item>
        <item>By having control over the system, the user has a greater sense of freedom, consequently a better user experience and a greater efficiency in the use of the application.</item>
        <item>The application that follows conventions and standards causes new users to have a lower learning curve while using the system, which benefits from the experience gained from using other applications. Thus, errors made by the user in the interactions with the application will be minimized, as the user will be familiar with the system navigation.</item>
        <item>By preventing the user from making mistakes, the user will spend less time trying to solve them, which can lead to greater efficiency.</item>
        <item>By reducing memory load, the user’s mental capacity and effort is also reduced and the user can focus on performing a single task more efficiently.</item>
        <item>The user being able to customize some actions and/or features has a deep sense of ownership. The same is true by facilitating user access to features that are more used, and better tailoring the application to the user profile. Shortcuts contribute to achieving efficiently the goals and thus provide real benefits to the user, such as maximizing battery efficiency.</item>
        <item>Lower response times and better performance, which leads to an efficient system.</item>
        <item>If the application uses a minimalist design, the device uses less resources, which should lead to better performance, and also minimizes the amount of user visual information that can lead to less stress and exhaustion.</item>
        <item>Being able to get help messages and instructions on how to recover from the error, the users are aided to reduce their frustration in dealing with the error</item>
        <item>Through greater knowledge of the system, the user tends to make a smaller number of errors and to have a greater efficiency in the use of the application, as well as, she/he can gain a better knowledge of the system through a rich documentation and also can reduce the risk of making mistakes.</item>
        <item>The application becomes more intuitive using layout elements in the interface that are familiar to the user, such as putting buttons in recognizable positions or when varying the orientation of the application between vertical and horizontal dispositions, the interface maintain the same layout of the elements on the screen. Adapting the entire application interface, taking into account the user’s characteristics as well as the usage context, makes the end user more efficient in interactions with the application.</item>
        <item>The users will get greater satisfaction and trust in the application knowing that their personal data is protected.</item>
    </string-array>

    <string-array name="list_problems_heuristic">
        <item>It is important to distinguish, when applying this heuristic, that the user may experience problems with the absence of feedback due to the lack of implementation of this functionality or application performance problems caused by a large number of concurrent processes and/or because of the low battery life, affecting application performance.</item>
        <item>When applying this heuristic, it should not be confused with ‘‘UH4 - Consistency and Standards’’. If some parts of the system are in a different language, it is not a matter related to ‘‘UH2 - Correspondence between the Application and the Real World’’, but a matter of consistency.</item>
        <item>This heuristic should not be confused with the concept of flexibility and efficiency of use. Although some control effects are related to better efficiency (as pointed out in the Benefits above), they are dissimilar concepts. The heuristic ‘‘UH3 - User Control and Freedom’’ is intended to repair or fix errors, giving the user a chance to undo or redo her/his actions and have control over the features of the device.</item>
        <item>When one speaks of consistency, one classic aspect is the consistency of the language. Sometimes there are words that do not have proper translation, especially when related to technology. These words can be difficult to translate or even lose meaning. So keeping some words in another language may not be a ‘‘consistency’’ problem, but keeping an integer paragraph is definitely one.</item>
        <item>This concept should not be confused with ‘‘UH10 - Help Users Recognize, Diagnose, and Recover from Errors’’. If the user can trigger an error, this is a prevention problem.</item>
        <item>For this specific heuristic, the evaluator may encounter some problems related to error prevention. The main point here is to note that this heuristic is strongly related to information overload. It is not about the availability of information, but about the amount of information that the user needs to memorize to use the system correctly and more efficiently, based on the context of use of the application.</item>
        <item>Clearly, there is a limit in terms of customization. Aesthetic modifications may be possible in most parts of the system, but some things are not achievable. Significant changes must be analyzed on a case-by-case basis as to their implementation validity, and it is necessary to consider the profile of the target public in the analysis.</item>
        <item>Problems related to hardware performance should be separated from problems related to network performance. Even though these problems affect usability, they are not part of the scope of this research, considering that they are affected by several complex factors. In relation to the duration of a sequence of steps to perform a task, the limit between normal and excessive is a subjective matter. The evaluator should use his or her own criteria.</item>
        <item>To distinguish between a minimalist design and an overloaded interface, it is necessary for the evaluator to define a subjective criterion at the time of evaluation. If the evaluator faces an overloaded interface, there is clearly a problem related to this heuristic.</item>
        <item>The evaluator must distinguish between prevention and help to recover from the error. The main difference here is the timing. If the error has not yet happened, the case is about prevention, otherwise it could be a problem related to this heuristic.</item>
        <item>The main difficulty in applying this heuristic is how to differentiate it from error prevention. Even though documentation and help messages can prevent errors, this heuristic is very focused on instructions on how to use the system (such as user gesture interaction), additional options and configuration information, and so on.</item>
        <item>A possible problem in applying this heuristic may be the case of users with special needs/characteristics. In this case, the appraiser must use his or her own discretion. There are applications that may be uncomfortable for most users and this is a problem related to this heuristic. A very important aspect to consider is ‘‘popularity’’, that is, what best suits most users. However, each case should be analyzed separately and the evaluator should establish its criteria.</item>
        <item>The purpose here is not just documentation or ways to inform the user of the protection methods used, but in fact to have features within the application that ensure the privacy of user data (such as differentiated data views for the user and her/his followers in a social networking application).</item>
    </string-array>

    <string-array name="list_sub_heuristic">
        <item>Does each application screen start with a title or header that describes the screen\'s content?</item>
        <item>Is a single selected icon clearly visible when surrounded by unselected icons?</item>
        <item>If the system receives important information from background actions (eg internal app notifications, upload or download submission process, etc.), does the system respond (eg vibrate, beep) by alerting users?</item>
        <item>If users need to navigate between multiple screens, do they have meaningful titles?</item>
        <item>If pop-up notifications are used to display error messages, do they allow the user to see the field with the error?</item>
        <item>Is there any form of system feedback for each user action?</item>
        <item>If the user is scrolling to the boundary of an element (eg listview), are there any visual cues?</item>
        <item>If the system contains splash screens (first screen shown when running an application), is there any visual feedback of what the system is doing while splash screens are displayed?</item>
        <item>If both overwrite and insert modes are available, is there a visual indication of which one the user is in?</item>
        <item>Does the system provide informational progress reporting when performing an action that the user needs to wait (percent complete or wait time to complete the task)?</item>
        <item>If expandable menus are used, do the menu labels indicate that they expand into a set of options?</item>
        <item>After the user completes an action (or group of actions), does the application indicate whether it is possible to start a new action (or group of actions)?</item>
        <item>Is there visual feedback on the screen about which options are selectable (allow user interaction)?</item>
        <item>If multiple objects on the screen can be selected, is there visual feedback on which objects have already been selected?</item>
        <item>There is visual feedback when objects are moved from one screen point to another?</item>
        <item>Is there visual feedback when the user takes the action to refresh the screen?</item>
        <item>Can the user identify the state of the system, and the available action alternatives, simply by looking at the information displayed on the application\'s screen?</item>
        <item>Are operating system status bars most of the time (or always) visible, except for multimedia content?</item>
        <item>Are operating system buttons (eg back button and home button) most (or always) visible except for multimedia content?</item>
        <item>If there are observable delays (more than five seconds) in system response time, is the user informed about the state of the application?</item>
        <item>Are the response times appropriate for the task? (Typing, swipe, scrolling: 1–50 milliseconds; Simple and frequent tasks: less than 1 second; Common tasks: 2–4 seconds; Complex tasks: 8–12 seconds).</item>
        <item>Are response times adequate for the user\'s cognitive processing? (Continuity of thought is required and information must be recalled in multiple responses: less than two seconds. High levels of concentration are not necessary and no need to remember information (minimize user memory load): two to fifteen seconds ).</item>
        <item>Are metaphors (eg icons that correspond to actions) used?</item>
        <item>Are the icons familiar to the user, given the context in which the application is placed?</item>
        <item>Are the screen elements logically ordered to take into account the user\'s characteristics and the application\'s context of use?</item>
        <item>Are the function keys clearly and distinctly labeled?</item>
        <item>Do related and interdependent interface elements appear on the same screen?</item>
        <item>In data entry screens, are tasks described in terminology familiar to users (considering the context in which the application is inserted)?</item>
        <item>If shapes are used as a visual cue (eg a “basketball ball”), does it match cultural conventions (is it displayed to resemble a “basketball”)?</item>
        <item>Are the terminology of the texts used in the application consistent with the domain of the user\'s tasks (are they meaningful to the user)? (Use domain-specific naming; Employ user jargon and avoid system jargon).</item>
        <item>Do interactive elements of the application correspond to the real world (eg, scrolling list physics)?</item>
        <item>Does the system automatically align the format to numeric values (for example, inserting trailing spaces, leading spaces, commas and/or a currency symbol)?</item>
        <item>Can the user interact with the system continuously (without experiencing system crashes or freezes)?</item>
        <item>When a user\'s task completes, does the system wait for a signal from the user before actually completing it?</item>
        <item>Is the virtual keyboard only displayed when needed?</item>
        <item>If the virtual keyboard is displayed, is the user able to minimize it?</item>
        <item>Can the user\'s personal data (sensitive data) be changed?</item>
        <item>General registration data (if the application has this functionality) of the user can be changed?</item>
        <item>If a dialog box is appearing, the location of the positive button (eg “OK button”, “Next” button) on the right side and the negative one (eg “Cancel button”, “Back button”) is on the left ? (Placing positive buttons on the right gives a feeling of continuing and progressing in the task, whereas placing negative buttons on the left gives a feeling of reversing the task. This is also easier to understand at a glance).</item>
        <item>If a dialog is being displayed, can the user be dismissed by touching any area outside the dialog?</item>
        <item>Do notifications indicate that the user is in control (giving action options)?</item>
        <item>Is there an “undo” function at the level of a single action, a data entry and a complete group of actions?</item>
        <item>Can users cancel ongoing operations?</item>
        <item>Can users easily reverse their actions?</item>
        <item>If users can go back to the previous screen, can they change their choice or any data?</item>
        <item>If listviews are long (eg more than seven items), can users select any items simply by scrolling the list?</item>
        <item>Do the function keys that can cause serious consequences to the user have the undo feature?</item>
        <item>Does the system use transitions to show relationships between screens?</item>
        <item>Can users pre-type in data entry fields if they haven\'t filled in the previous fields?</item>
        <item>Are character changes allowed in data entry fields?</item>
        <item>Can users go back and forth between fields or data entry options?</item>
        <item>If the application supports the use of a mouse pointer, do users have the option to click on UI items?</item>
        <item>Are industry or company formatting standards consistently followed across all application screens?</item>
        <item>When notifications imply a required action, is the message text consistent with that action?</item>
        <item>If words are abbreviated, do they follow the same abbreviation pattern?</item>
        <item>Are platform design standards (eg iOS and Android design guidelines) followed?</item>
        <item>Does each screen have a title?</item>
        <item>Are all system screens displayed consistently across devices from different platforms/manufacturers (eg iPhone, Samsung Galaxy)?</item>
        <item>Is there a consistent menu location in the application interface across the system?</item>
        <item>Is there typography consistency across the application?</item>
        <item>Is there a consistent design across input elements (eg textbox, dropdown, etc.)?</item>
        <item>Is there a consistent design in the physical size of the screen elements (font size, element size relative to others)?</item>
        <item>Can system font appearance (eg size, font) be changed to be consistent with operating system font appearance (eg iOS or Android)?</item>
        <item>Are colors consistent across the application?</item>
        <item>Is the structure of a value in application data entry consistent across the system?</item>
        <item>Is the application\'s navigation system standardized?</item>
        <item>Is gesture interaction on similar interface elements standardized across the application?</item>
        <item>Is the structure of a value in data entry consistent across the application?</item>
        <item>If the system contains multiple screens for data entry, do they all have the same title?</item>
        <item>Does the system prevent users from making mistakes whenever possible?</item>
        <item>Are users asked to confirm commands that have drastic and destructive consequences?</item>
        <item>Is it avoided to use very long texts, which are not displayed completely (for example, use at the end “…”), in the application? (Important information may be hidden and lead the user to make mistakes).</item>
        <item>When the user chooses to stay logged in, does he receive a message informing about the possible risks (if any)?</item>
        <item>Are objects on the screen the size easy to tap?</item>
        <item>Are touchable objects (eg buttons) on the screen placed too close together?</item>
        <item>Are there visual differences between interaction objects (eg buttons) and information objects (eg labels, images)?</item>
        <item>Although the visible part of the screen element may be small, is there any invisible target space that if the user hits it, the action will still be performed?</item>
        <item>Are menu options logical, distinct and mutually exclusive?</item>
        <item>Are function keys that can cause more serious consequences in hard-to-reach positions?</item>
        <item>In the data entry interface, does the application inform the user about errors in real time, if they enter the information in the wrong pattern?</item>
        <item>Are data entry types appropriate for information types (for example, using numeric entry type for numeric information)?</item>
        <item>Do screen input fields contain default values where appropriate?</item>
        <item>Is all the data the user needs displayed at each step of a transaction sequence (multiple screens)?</item>
        <item>Have screen elements been grouped into logical zones and headers used to distinguish zones?</item>
        <item>Is the first word (when available) of each user choice (interactive interface element) the most important?</item>
        <item>Does the system provide mapping, ie are the relationships between gestures and actions intuitive?</item>
        <item>In navigation menus, are the number of items and terms (per item) controlled to avoid cognitive memory overload?</item>
        <item>For usage contexts, in which the user needs to direct his attention to another task in parallel, is the interface adapted to reduce the user\'s memory load?</item>
        <item>Are mandatory data entry fields clearly marked?</item>
        <item>Does the system provide example input for complex or format-specific information?</item>
        <item>Are requests, suggestions, and messages placed in places the user is likely to be looking at on the screen (intuitive places to show certain information)?</item>
        <item>Do text areas on the screen have “breathing room” around them?</item>
        <item>Is there an obvious visual distinction between “pick one” and “pick many” in a list of elements?</item>
        <item>Between the description of an input field and the field itself is there a minimum space separating them?</item>
        <item>Are optional data entry fields clearly highlighted?</item>
        <item>Is color highlighting used to get the user\'s attention when needed?</item>
        <item>Are inactive, interactive interface objects faded or less colored in relation to other colors?</item>
        <item>Are size, bold or underlined font, color, shading or typography used to show hierarchy between screen items?</item>
        <item>Are borders used to identify groups of significant objects or information?</item>
        <item>Was the same color used to group related elements?</item>
        <item>Is color used in conjunction with any other redundant suggestions?</item>
        <item>Is there good color contrast and brightness between the image and background colors?</item>
        <item>Were light, bright, and saturated colors used to emphasize important data over darker colors?</item>
        <item>Do data entry screens indicate when fields are optional?</item>
        <item>Are users the initiators of actions, not the responders?</item>
        <item>In the application settings is it possible to customize any part of the system?</item>
        <item>If the system supports both novice and expert users, are various levels of error message detail available?</item>
        <item>If the system supports both novice and expert users, are the customizations suited to the characteristics of the target audience (eg significant customizations for users using the system in a medical use context)?</item>
        <item>If the system supports both novice and expert users, can interface elements be customizable?</item>
        <item>If the system supports both novice and expert users, can navigation elements be customizable?</item>
        <item>Have splash screens that do nothing (no background tasks, just show the image or video) avoided?</item>
        <item>Are the most frequently used menus in the most accessible positions?</item>
        <item>Does the system use device information such as date and time and geolocation as input data when needed?</item>
        <item>In a data entry form, can the user move focus from one text box to another text box by pressing “next” on the virtual keyboard?</item>
        <item>The system allows users to interact with interface elements by swiping, gesturing or “pinching” rather than just touching (eg users can pinch the image element to zoom in and out, users can swipe left to go the previous page)?</item>
        <item>If the list is too long, does the system provide tools to filter items or scroll faster?</item>
        <item>Are transition animations between screens and/or interface elements fluid?</item>
        <item>Are the main features of the application easily accessed (few steps to be performed)?</item>
        <item>In search fields is it allowed to access the history in order to allow users to select previously entered information?</item>
        <item>Is the use of images or icons usable above texts in the application?</item>
        <item>Is only essential decision-making information displayed on the screen?</item>
        <item>Are all icons in a set visually and conceptually distinct?</item>
        <item>Were large objects, bold lines and simple areas used to distinguish icons?</item>
        <item>Are significant groups of items separated by white or empty spaces?</item>
        <item>Does each data entry screen have a short, simple, clear, and distinct title?</item>
        <item>Are the label labels brief, familiar and descriptive?</item>
        <item>Are requests expressed affirmatively and using active voice?</item>
        <item>Is each lower-level menu option associated with only one higher-level menu?</item>
        <item>Are the titles of menus or interface items brief but long enough to communicate?</item>
        <item>Does the system not use too many fonts (fonts can be used to emphasize content, but too many fonts can confuse users)?</item>
        <item>Do information elements (eg images, icons) stand out from the background?</item>
        <item>Are unnecessary moving animations of information (eg zoom in, zoom out) avoided?</item>
        <item>Is sound or some tactile feedback used to signal an error?</item>
        <item>Are requests stated constructively, without explicit or implicit criticism of the user?</item>
        <item>Are the error messages brief and unambiguous?</item>
        <item>Are error messages written so that the system, not the user, takes the blame?</item>
        <item>If humorous error messages are used, are they appropriate and harmless to the user population?</item>
        <item>Are the error messages grammatically correct?</item>
        <item>Do error messages prevent the use of exclamation points?</item>
        <item>Do error messages prevent the use of violent or hostile words?</item>
        <item>Do error messages prevent an anthropomorphic tone?</item>
        <item>Do system error messages use consistent grammatical style, form, terminology, and abbreviations?</item>
        <item>Do messages put users in control of the system?</item>
        <item>Does the command language use the normal action object syntax?</item>
        <item>If an error is detected in a data entry field, does the system highlight the error and/or the element that needs to be changed?</item>
        <item>Do error messages inform the user of the severity of the error?</item>
        <item>Error messages suggest the cause of the problem?</item>
        <item>Error messages provide proper semantic information?</item>
        <item>Error messages indicate what action the user needs to take to correct the error?</item>
        <item>If the system supports both novice and expert users, are various levels of error message detail available?</item>
        <item>If there are help instructions/tutorials, are they visually distinct and visible from the rest of the interface?</item>
        <item>Do the instructions follow the sequence of user actions?</item>
        <item>If menu or list items are ambiguous, does the system provide additional information when an item is selected?</item>
        <item>Navigation: is the information easy to find?</item>
        <item>Presentation: Is the layout well designed?</item>
        <item>Conversation: is the information accurate, complete, and easy to understand?</item>
        <item>Is the information relevant? (Goal-oriented (what can I do with this program?); Descriptive (what is this for?); Procedural (how do I do this task?); Interpretive (why did this happen?) Navigation (where am I?)).</item>
        <item>Is there help for sensitive user data?</item>
        <item>Can the user change the level of detail (of the information) available?</item>
        <item>Is it easy to access and return from the help system?</item>
        <item>Can users pick up work where they left off after accessing help?</item>
        <item>If a FAQ section exists, is the selection and text of the questions and answers correctly related to the subject?</item>
        <item>When users first start using the system, does the system provide instructions (or tips)?</item>
        <item>If first time user instructions are provided, can they be characterized as described below? (Be simple and clear; Focusing on a few features (eg, frequently used features); Needing users to get started).</item>
        <item>Are the data entry fields that require typing minimal?</item>
        <item>For data entry screens with many fields or incomplete information to fill in, can users save a partially filled screen (or part of it)?</item>
        <item>Are the typographic families used in the system suitable for reading (does not contain homoglyphs, for example, 1, I and L; Zero and O)?</item>
        <item>Does the application implement any accessibility system of its own or does it support the platform\'s (for example, voice over on the iOS system used for reading and browsing by visually impaired users)?</item>
        <item>Is the application optimized for the context of use that users are inserted in (eg user with physical disabilities)?</item>
        <item>Is the layout of the application\'s layout elements based and optimized for the context in which the target audience is inserted (for example, map application that is usually used while the user is carrying out other parallel activity)?</item>
        <item>Does the system support both orientations (horizontal and vertical)?</item>
        <item>If the application works in portrait and landscape orientation, will the layout of the layout elements remain the same?</item>
        <item>Is each individual icon a harmonious member of an icon family?</item>
        <item>Have excessive detail in the icon design been avoided?</item>
        <item>Was the color used with discretion?</item>
        <item>Was color used specifically to draw attention, communicate the organization, indicate changes in status, and establish relationships?</item>
        <item>Are protected areas completely inaccessible?</item>
        <item>Do protected or confidential areas have the option to be accessed with passwords?</item>
        <item>Is the privacy feature effective and successful in the application?</item>
        <item>For multi-user apps, does the system prevent the user from being permanently logged in/logged in?</item>
        <item>If the app stores credit card information, does it allow users to decide if they want to stay logged in?</item>
        <item>Is there information on how personal data is protected and on the copyright of the application?</item>
        <item>If there are transactions in the app, is it possible for users to save the confirmation numbers for that transaction (for example, by emailing them)?</item>
    </string-array>
</resources>